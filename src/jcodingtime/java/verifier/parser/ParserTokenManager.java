package verifier.parser;
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000001000L) != 0L)
            return 2;
         if ((active0 & 0xffc000000000000eL) != 0L || (active1 & 0x1fffffffffffffL) != 0L)
         {
            jjmatchedKind = 117;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0xffc000000000000eL) != 0L || (active1 & 0x1fefffffffdff3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 1;
            }
            return 2;
         }
         if ((active1 & 0x10000000200cL) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x1000000000000L) != 0L)
            return 2;
         if ((active0 & 0xffc000000000000eL) != 0L || (active1 & 0x1fef7fffd9d7fbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active1 & 0x8000260800L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0xd3c000000000000eL) != 0L || (active1 & 0x1e0e3bff95c7cbL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x2c00000000000000L) != 0L || (active1 & 0x1e14400481030L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x1c000000000000aL) != 0L || (active1 & 0x1e0a236f95c04bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0xd200000000000004L) != 0L || (active1 & 0x841890000780L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x140000000000002L) != 0L || (active1 & 0x1c0a2243854243L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x80000000000008L) != 0L || (active1 & 0x200112c108008L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x4000001800242L) != 0L)
            return 1;
         if ((active0 & 0x40000000000002L) != 0L || (active1 & 0x180a2242054001L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x80a0040000001L) != 0L)
            return 1;
         if ((active0 & 0x2L) != 0L || (active1 & 0x10002202054000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active1 & 0x2002040000L) != 0L)
            return 1;
         if ((active0 & 0x2L) != 0L || (active1 & 0x10000200014000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active1 & 0x10000000014000L) != 0L)
            return 1;
         if ((active0 & 0x2L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active0 & 0x2L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L);
      case 33:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 37:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 38:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x20002000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 4);
      case 41:
         return jjStopAtPos(0, 5);
      case 42:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 43:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x2004000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x2004008000000L, 0x0L);
      case 46:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 58:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 10);
      case 60:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x201000200000L, 0x0L);
      case 61:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0xc00000400000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 18);
      case 64:
         return jjStopAtPos(0, 13);
      case 91:
         return jjStopAtPos(0, 8);
      case 93:
         return jjStopAtPos(0, 9);
      case 94:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x700000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xeL);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000070L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf80L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x7e000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8L, 0xc00000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000007800000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80008000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f0000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1010fc00000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x240000000000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 124:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x40001000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 7);
      case 126:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 38:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 43:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 45:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 58:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 60:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 62:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L, active1, 0x900080L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80008200002L);
      case 102:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 77, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x41c10000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000300L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x410L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0x70020L);
      case 111:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 108, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x8100000000000000L, active1, 0x2030000081809L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x1800e003000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0x1000000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0x84400000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000040L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x200000000L);
      case 124:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 2);
         break;
      case 61:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000000L, active1, 0x10002020000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x1c00000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x50501000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000400080L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x200080301L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000002L, active1, 0x8000012000400L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0x400008000c000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1840000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8c0000000000000L, active1, 0x10010L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000000000008L, active1, 0x200008141040L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000028L);
      case 119:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 1);
         break;
      case 121:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x20000000702L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x200000000L);
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 1);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 1);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 1);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x80040040L);
      case 103:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 1);
         break;
      case 104:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40100000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L);
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x40004004000L);
      case 109:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 1);
         break;
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10802000000000L);
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4001800008000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L);
      case 115:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 1);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000000L, active1, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x122010001L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0x2080008000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000001000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1810000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x140000000L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 1);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x2004000L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L, active1, 0x8080024000001L);
      case 107:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 1);
         break;
      case 108:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000208L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 114:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000000L, active1, 0x4000008048000L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 1);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10002000000000L);
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 1);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 1);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 1);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      case 119:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 1);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000040L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 1);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 1);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000L);
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10022000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x202L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2L, active1, 0x10001L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80200000000L);
      case 115:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 1);
         break;
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 1);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000041000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x10000L);
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 1);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8082000004000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L);
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 1);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 1);
         break;
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000002000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 1);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2010000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2200004000L);
      case 112:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 1);
         break;
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 1);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 115, 1);
         break;
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x2L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 1);
         break;
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2L, active1, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 116, 1);
         break;
      case 102:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x2L, active1, 0L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 78, 1);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(10, 1, 1);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 97, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar != 46)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAdd(1);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 5, 6, 5, 6, 8, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\152\143\157\144\151\156\147\164\151\155\145", "\151\156\160\165\164", 
"\157\165\164\160\165\164", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", 
"\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", "\55\76", 
"\72\72", null, null, null, "\141\142\163\164\162\141\143\164", 
"\141\163\163\145\162\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\157", "\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", 
"\145\170\164\145\156\144\163", "\146\141\154\163\145", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\164\162\151\143\164\146\160", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\162\145\161\165\151\162\145\163", "\164\157", 
"\167\151\164\150", "\157\160\145\156", "\157\160\145\156\163", "\165\163\145\163", 
"\155\157\144\165\154\145", "\145\170\160\157\162\164\163", "\160\162\157\166\151\144\145\163", 
"\164\162\141\156\163\151\164\151\166\145", null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x1f00000000000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[9];
static private final int[] jjstateSet = new int[18];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                                  System.out.println("Palavra reservada jcodingtime coincide com -> "+image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                        System.out.println("Palavra reservada input coincide com -> "+image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                          System.out.println("Palavra reservada output coincide com -> "+image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                  System.out.println("PESQ -> "+image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                  System.out.println("PDIR -> "+image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                  System.out.println("CESQ -> "+image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                  System.out.println("CDIR -> "+image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                    System.out.println("COUESQ -> "+image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                    System.out.println("COUDIR -> "+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                     System.out.println("PONTO E V\u00cdRGULA -> "+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                 System.out.println("V\u00cdRGULA -> "+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
               System.out.println("PONTO -> "+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
              System.out.println("ARROBA -> "+image);
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("D\u00edgito: -> "+image);
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("Inteiro: -> "+image);
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                           System.out.println("Real: -> "+image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                 System.out.println("int: -> "+image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                       System.out.println("public: -> "+image);
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                   System.out.println("void: -> "+image);
         break;
      case 117 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        System.out.println("Character: -> "+image);
         break;
      case 118 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      System.out.println("Identifier: -> "+image);
         break;
      case 119 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("Literal: -> "+image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
