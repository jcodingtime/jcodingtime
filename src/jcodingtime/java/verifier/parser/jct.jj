PARSER_BEGIN(Parser)
class Parser
{
    public static void main(String[] args) throws ParseException
    {
        try
        {
            Parser parser = new Parser(System.in);
            parser.Program();
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(Parser)

/* RESERVED WORDS TO JCODINGTIME */

TOKEN : {
    < JCODINGTIME: "jcodingtime">{System.out.println("Palavra reservada jcodingtime coincide com -> "+image);}
    | < INPUT: "input">{System.out.println("Palavra reservada input coincide com -> "+image);}
    | < OUTPUT: "output">{System.out.println("Palavra reservada output coincide com -> "+image);}
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN: "(" >{System.out.println("Parêntese esquerdo -> "+image);}
| < RPAREN: ")" >{System.out.println("Parêntese direito -> "+image);}
| < LBRACE: "{" >{System.out.println("Chave esquerda -> "+image);}
| < RBRACE: "}" >{System.out.println("Chave direita -> "+image);}
| < LBRACKET: "[" >{System.out.println("Colchete esquerdo-> "+image);}
| < RBRACKET: "]" >{System.out.println("Colchete direito-> "+image);}
| < SEMICOLON: ";" >{System.out.println("Ponto e vírgula -> "+image);}
| < COMMA: "," >{System.out.println("Vírgula -> "+image);}
| < DOT: "." >{System.out.println("Ponto -> "+image);}
| < AT: "@" >{System.out.println("Símbolo arroba -> "+image);}
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < ARROW: "->" >
| < DOUBLECOLON: "::" >
}

/* NUMERATORS */

TOKEN :
{
    < DIGIT: ["0"-"9"]>{System.out.println("Dígito: -> "+image);}
    | < INTEGER: (<DIGIT>)+ >{System.out.println("Inteiro: -> "+image);}
    | < REAL: (<INTEGER>["."]<INTEGER>)+ >{System.out.println("Real: -> "+image);}
}


/* RESERVED WORDS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >{System.out.println("palavra reservada int: -> "+image);}
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >{System.out.println("palavra reservada public: -> "+image);}
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >{System.out.println("palavra reservada void: -> "+image);}
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < REQUIRES: "requires" >
| < TO: "to" >
| < WITH: "with" >
| < OPEN: "open" >
| < OPENS: "opens" >
| < USES: "uses" >
| < MODULE: "module" >
| < EXPORTS: "exports" >
| < PROVIDES: "provides" >
| < TRANSITIVE: "transitive" >
}

/* TEXT */

TOKEN : {
    < CHARACTER: (["a"-"z"]|["A"-"Z"])>{System.out.println("Caractere: -> "+image);}
    | < IDENTIFIER: (["a"-"z"]|["A"-"Z"]|["0"-"9"])+>{System.out.println("Identificador: -> "+image);}
    | < LITERAL: (["."])+>{System.out.println("Literal: -> "+image);}
}

SKIP:
{
    " "| "\r\n" |"\t" | "\n" | "\r"
}

void Program():
{}
{
        signatures()
        method()
}

void signatures() :
{}
{
  <AT><JCODINGTIME>
  <AT><INPUT> <LPAREN> <DIGIT> <COMMA><DIGIT> <RPAREN>
  <AT><OUTPUT> <INTEGER>
}

void method() :
{}
{
   ((<PUBLIC>|<PRIVATE>|<PROTECTED>) (<STATIC> (<INT> | <FLOAT> | <CHAR> | <BOOLEAN> | <DOUBLE> | <VOID>) | (<INT> | <FLOAT> | <CHAR> | <BOOLEAN> | <DOUBLE> | <VOID>)) | (<STATIC> <VOID> | <VOID>))  <IDENTIFIER> <LPAREN> (<INT> | <FLOAT> | <CHAR> | <BOOLEAN> | <DOUBLE>) <IDENTIFIER> <COMMA> (<INT> | <FLOAT> | <CHAR> | <BOOLEAN> | <DOUBLE>) <IDENTIFIER> <RPAREN>
}