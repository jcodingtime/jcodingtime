PARSER_BEGIN(Parser)
class Parser
{
    public static void main(String[] args) throws ParseException
    {
        try
        {
            Parser parser = new Parser(System.in);
            parser.Program();
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(Parser)

/* SEPARATORS */
TOKEN :
{
  < LPAREN: "(" >{System.out.println("PESQ -> "+image);}
| < RPAREN: ")" >{System.out.println("PDIR -> "+image);}
| < LBRACE: "{" >{System.out.println("CESQ -> "+image);}
| < RBRACE: "}" >{System.out.println("CDIR -> "+image);}
| < LBRACKET: "[" >{System.out.println("COUESQ -> "+image);}
| < RBRACKET: "]" >{System.out.println("COUDIR -> "+image);}
| < SEMICOLON: ";" >{System.out.println("PONTO E VÍRGULA -> "+image);}
| < COMMA: "," >{System.out.println("VÍRGULA -> "+image);}
| < DOT: "." >{System.out.println("PONTO -> "+image);}
| < AT: "@" >{System.out.println("ARROBA -> "+image);}
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < ARROW: "->" >
| < DOUBLECOLON: "::" >
}

TOKEN :
{
    < DIGIT: ["0"-"9"]>{System.out.println("Dígito: -> "+image);}
}

SKIP:
{
    " "| "\r\n" |"\t" | "\n" | "\r"
}

void Program():
{}
{
    <AT><LBRACE> <DIGIT> <RBRACE>
}